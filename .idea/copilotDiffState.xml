<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/fqhll/keyboard/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/fqhll/keyboard/MainActivity.kt" />
              <option name="originalContent" value="package com.fqhll.keyboard&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.method.LinkMovementMethod&#10;import android.view.View&#10;import android.widget.AdapterView&#10;import android.widget.ArrayAdapter&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Spinner&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import android.provider.Settings&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.widget.SwitchCompat&#10;import androidx.core.content.edit&#10;import com.fqhll.keyboard.databinding.ActivityMainBinding&#10;import java.io.File&#10;import java.io.FileNotFoundException&#10;import java.io.FileOutputStream&#10;import java.io.IOException&#10;import java.nio.file.Files&#10;import java.nio.file.Paths&#10;import android.view.inputmethod.InputMethodManager;&#10;&#10;class MainActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener {&#10;&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    private var themes = arrayOf(&quot;Unselected&quot;, &quot;Shun&quot;, &quot;Ducky&quot;, &quot;Cabbage&quot;, &quot;Sage&quot;, &quot;ThisIsFine&quot;, &quot;AntiThisIsFine&quot;, &quot;Black&quot;, &quot;DarkBlue&quot;, &quot;Hammerhead&quot;, &quot;Stargaze&quot;, &quot;CottonCandy&quot;, &quot;Yellow&quot;, &quot;Teal&quot;, &quot;Purple&quot;, &quot;Green&quot;, &quot;Cyan&quot;)&#10;    private var keyboardHeights = arrayOf(&quot;Unselected&quot;, &quot;Short&quot;, &quot;Medium&quot;, &quot;Tall&quot;, &quot;Custom&quot;)&#10;    private var keyboardLayouts = arrayOf(&quot;Unselected&quot;, &quot;QWERTY&quot;, &quot;QWERTZ&quot;, &quot;AZERTY&quot;, &quot;Dvorak&quot;, &quot;Colemak&quot;, &quot;Zhuyin&quot;)&#10;    private var emojiVariations = arrayOf(&quot;Unselected&quot;, &quot;Masculine&quot;, &quot;Feminine&quot;, &quot;Neutral&quot;)&#10;    private var keySound = arrayOf(&quot;Unselected&quot;, &quot;click&quot;, &quot;meow&quot;, &quot;quack&quot;)&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;&#10;        val repoLink: TextView = findViewById(R.id.repoLink)&#10;        repoLink.movementMethod = LinkMovementMethod.getInstance()&#10;&#10;        // Toggles&#10;&#10;        val capsToggle: SwitchCompat = findViewById(R.id.capsToggle)&#10;        val autocorToggle: SwitchCompat = findViewById(R.id.autocorToggle)&#10;        val gridToggle: SwitchCompat = findViewById(R.id.gridToggle)&#10;        val etenToggle: SwitchCompat = findViewById(R.id.etenToggle)&#10;        &#10;        val prefs = getSharedPreferences(&quot;keyboard_settings&quot;, Context.MODE_PRIVATE)&#10;&#10;        if (!prefs.contains(&quot;capsToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;capsToggle&quot;, true).commit()&#10;        }&#10;        if (!prefs.contains(&quot;autocorToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;autocorToggle&quot;, true).commit()&#10;        }&#10;        if (!prefs.contains(&quot;gridToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;gridToggle&quot;, false).commit()&#10;        }&#10;        if (!prefs.contains(&quot;etenToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;etenToggle&quot;, false).commit()&#10;        }&#10;        if (!prefs.contains(&quot;keySoundToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;keySoundToggle&quot;, false).commit()&#10;        }&#10;&#10;        // Load saved toggle state&#10;        capsToggle.isChecked = prefs.getBoolean(&quot;capsToggle&quot;, true)&#10;        autocorToggle.isChecked = prefs.getBoolean(&quot;autocorToggle&quot;, true)&#10;        gridToggle.isChecked = prefs.getBoolean(&quot;gridToggle&quot;, false)&#10;        etenToggle.isChecked = prefs.getBoolean(&quot;etenToggle&quot;, false)&#10;        &#10;&#10;        // Save toggle changes&#10;        capsToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;capsToggle&quot;, isChecked) }&#10;        }&#10;        autocorToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;autocorToggle&quot;, isChecked) }&#10;        }&#10;        gridToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;gridToggle&quot;, isChecked) }&#10;        }&#10;        etenToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;etenToggle&quot;, isChecked) }&#10;        }&#10;&#10;        // Dropdowns&#10;&#10;        val keyBackgroundColor: Spinner = findViewById(R.id.color_options)&#10;        val savedColor = prefs.getString(&quot;key_color&quot;, &quot;Shun&quot;)&#10;        prefs.edit { putString(&quot;key_color&quot;, savedColor) }&#10;&#10;        val keyboardHeight: Spinner = findViewById(R.id.height_options)&#10;        val savedHeight = prefs.getString(&quot;keyboard_height&quot;, &quot;Short&quot;)&#10;        prefs.edit { putString(&quot;keyboard_height&quot;, savedHeight) }&#10;&#10;        val keyboardLayout: Spinner = findViewById(R.id.layout_options)&#10;        val savedLayout = prefs.getString(&quot;keyboard_layout&quot;, &quot;qwerty&quot;)?.lowercase()&#10;        prefs.edit { putString(&quot;keyboard_layout&quot;, savedLayout) }&#10;&#10;        val emojiVariation: Spinner = findViewById(R.id.emoji_options)&#10;        val savedEmoji = prefs.getString(&quot;emoji_variation&quot;, &quot;neutral&quot;)?.lowercase()&#10;        prefs.edit { putString(&quot;emoji_variation&quot;, savedEmoji) }&#10;&#10;&#10;        val aa_color = ArrayAdapter(this, R.layout.spinner, themes)&#10;        aa_color.setDropDownViewResource(R.layout.spinner)&#10;&#10;        val aa_height = ArrayAdapter(this, R.layout.spinner, keyboardHeights)&#10;        aa_height.setDropDownViewResource(R.layout.spinner)&#10;&#10;        val aa_layout = ArrayAdapter(this, R.layout.spinner, keyboardLayouts)&#10;        aa_layout.setDropDownViewResource(R.layout.spinner)&#10;&#10;        val aa_emoji = ArrayAdapter(this, R.layout.spinner, emojiVariations)&#10;        aa_emoji.setDropDownViewResource(R.layout.spinner)&#10;&#10;        // the color dropdown&#10;        with(keyBackgroundColor) {&#10;            adapter = aa_color&#10;            setSelection(0, false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.custom_fqhll_banner_blue)&#10;        }&#10;&#10;        // the height dropdown&#10;        with(keyboardHeight) {&#10;            adapter = aa_height&#10;            setSelection(0, false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.shun_blue)&#10;        }&#10;&#10;        // the layout dropdown&#10;        with(keyboardLayout) {&#10;            adapter = aa_layout&#10;            setSelection(0, false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.shun_blue)&#10;        }&#10;&#10;        // the emoji dropdown&#10;        with(emojiVariation) {&#10;            adapter = aa_emoji&#10;            setSelection(0, false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.shun_blue)&#10;        }&#10;&#10;&#10;        // edit dictionary stuff&#10;&#10;        val editDictField: EditText = findViewById(R.id.edit_dict_input)&#10;        val addDictButton: Button = findViewById(R.id.add_dict_btn)&#10;        val removeDictButton: Button = findViewById(R.id.remove_dict_btn)&#10;//        val getDictButton: Button = findViewById(R.id.get_dict_btn)&#10;&#10;        addDictButton.setOnClickListener {&#10;            val inputWord = editDictField.text.toString()&#10;&#10;            if (!inDictionary(inputWord) &amp;&amp; inputWord != &quot;&quot;) {&#10;                showToast(message = &quot;adding $inputWord to dictionary...&quot;)&#10;                addToDictionary(inputWord)&#10;            }&#10;&#10;            else if (inputWord == &quot;&quot;) {&#10;                showToast(message = &quot;word cannot be empty!&quot;)&#10;            }&#10;&#10;            else {&#10;                showToast(message = &quot;$inputWord is already in your dictionary!&quot;)&#10;            }&#10;        }&#10;&#10;        removeDictButton.setOnClickListener {&#10;            val inputWord = editDictField.text.toString()&#10;&#10;            if (inDictionary(inputWord)) {&#10;                showToast(message = &quot;removing $inputWord from dictionary...&quot;)&#10;                removeFromDictionary(inputWord)&#10;            }&#10;&#10;            else if (inputWord == &quot;&quot;) {&#10;                showToast(message = &quot;word cannot be empty!&quot;)&#10;            }&#10;&#10;            else {&#10;                showToast(message = &quot;$inputWord is not in your dictionary!&quot;)&#10;            }&#10;        }&#10;&#10;//        getDictButton.setOnClickListener {&#10;//            saveFile()&#10;//        }&#10;&#10;&#10;        // launch keyboard stuff&#10;&#10;        val openSettingsButton: Button = findViewById(R.id.open_settings_btn)&#10;        val setKeyboardButton: Button = findViewById(R.id.set_keyboard_btn)&#10;&#10;        openSettingsButton.setOnClickListener {&#10;            openKeyboardSettings()&#10;        }&#10;&#10;        setKeyboardButton.setOnClickListener {&#10;            switchKeyboard()&#10;        }&#10;    }&#10;&#10;    override fun onItemSelected(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;        val prefs = getSharedPreferences(&quot;keyboard_settings&quot;, Context.MODE_PRIVATE)&#10;        if (parent != null) {&#10;            when (parent.id) {&#10;&#10;                R.id.color_options -&gt; {&#10;                    val selectedColor = themes[position] // Get the selected color&#10;                    if (!selectedColor.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;key_color&quot;, selectedColor) } // Save the selected color&#10;                        showToast(message = &quot;Selected theme: $selectedColor&quot;)&#10;                    }&#10;                }&#10;&#10;                R.id.height_options -&gt; {&#10;                    val selectedHeight = keyboardHeights[position]&#10;                    if (!selectedHeight.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;keyboard_height&quot;, selectedHeight) }&#10;                        showToast(message = &quot;Selected height: $selectedHeight&quot;)&#10;                    }&#10;                }&#10;&#10;                R.id.layout_options -&gt; {&#10;                    val selectedLayout = keyboardLayouts[position]&#10;                    if (!selectedLayout.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;keyboard_layout&quot;, selectedLayout) }&#10;                        showToast(message = &quot;Selected layout: $selectedLayout&quot;)&#10;                    }&#10;                }&#10;&#10;                R.id.emoji_options -&gt; {&#10;                    val selectedEmoji = emojiVariations[position]&#10;                    if (!selectedEmoji.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;emoji_variation&quot;, selectedEmoji) }&#10;                        showToast(message = &quot;Selected: $selectedEmoji&quot;)&#10;                    }&#10;                }&#10;&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {&#10;        showToast(message = &quot;Nothing selected&quot;)&#10;    }&#10;&#10;    private fun showToast(context: Context = applicationContext, message: String, duration: Int = Toast.LENGTH_LONG) {&#10;        Toast.makeText(context, message, duration).show()&#10;    }&#10;&#10;&#10;    external fun getSuggestion(input: String): String&#10;&#10;    private fun addToDictionary(word: String) {&#10;        val dictPath = filesDir.absolutePath + &quot;/test_files/20k_texting.txt&quot;&#10;        val customWordsPath = filesDir.absolutePath + &quot;/test_files/custom_words.txt&quot;&#10;        CustomKeyboardApp.nativeAddWord(word, dictPath)&#10;        CustomKeyboardApp.nativeAddWord(word, customWordsPath)&#10;    }&#10;&#10;    private fun removeFromDictionary(word: String) {&#10;        val dictPath = filesDir.absolutePath + &quot;/test_files/20k_texting.txt&quot;&#10;        val customWordsPath = filesDir.absolutePath + &quot;/test_files/custom_words.txt&quot;&#10;        CustomKeyboardApp.nativeRemoveWord(word, dictPath)&#10;        CustomKeyboardApp.nativeRemoveWord(word, customWordsPath)&#10;    }&#10;&#10;    private fun inDictionary(word: String): Boolean {&#10;        val path = Paths.get(filesDir.absolutePath + &quot;/test_files/20k_texting.txt&quot;)&#10;&#10;        val lines = Files.readAllLines(path)&#10;        val wordSet: Set&lt;String&gt; = HashSet(lines)&#10;&#10;        return wordSet.contains(word)&#10;    }&#10;&#10;    private fun getCustomWords(): Set&lt;String&gt; {&#10;        val path = Paths.get(filesDir.absolutePath + &quot;/test_files/custom_words.txt&quot;)&#10;&#10;        val lines = Files.readAllLines(path)&#10;        val wordSet: Set&lt;String&gt; = HashSet(lines)&#10;&#10;        return wordSet&#10;    }&#10;    &#10;    private val CREATE_FILE = 1&#10;&#10;    private fun saveFile() {&#10;        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {&#10;            addCategory(Intent.CATEGORY_OPENABLE)&#10;            type = &quot;text/plain&quot;&#10;            putExtra(Intent.EXTRA_TITLE, &quot;FQ-HLL_Keyboard_Custom_Dictionary_Export.txt&quot;)&#10;        }&#10;&#10;        val fileName = intent.getStringExtra(Intent.EXTRA_TITLE)&#10;        val file = fileName?.let { File(this.filesDir, it) }&#10;&#10;        showToast(message = fileName.toString())&#10;&#10;        startActivityForResult(intent, CREATE_FILE)&#10;        if (file != null) {&#10;            alterDocument(file)&#10;        }&#10;    }&#10;&#10;    private fun alterDocument(file: File) {&#10;        FileOutputStream(file).use { fos -&gt; fos.write(&quot;This is my custom file content.&quot;.toByteArray()) }&#10;    }&#10;&#10;    private fun openKeyboardSettings() {&#10;        val intent = Intent(Settings.ACTION_INPUT_METHOD_SETTINGS)&#10;        startActivity(intent)&#10;    }&#10;&#10;    private fun switchKeyboard() {&#10;        val inputMethodManager =&#10;            applicationContext.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager&#10;        inputMethodManager.showInputMethodPicker()&#10;    }&#10;&#10;    companion object {&#10;        init {&#10;            System.loadLibrary(&quot;keyboard&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.fqhll.keyboard&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.method.LinkMovementMethod&#10;import android.view.View&#10;import android.widget.AdapterView&#10;import android.widget.ArrayAdapter&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.Spinner&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import android.provider.Settings&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.appcompat.widget.SwitchCompat&#10;import androidx.core.content.edit&#10;import com.fqhll.keyboard.databinding.ActivityMainBinding&#10;import java.io.File&#10;import java.io.FileNotFoundException&#10;import java.io.FileOutputStream&#10;import java.io.IOException&#10;import java.nio.file.Files&#10;import java.nio.file.Paths&#10;import android.view.inputmethod.InputMethodManager;&#10;&#10;class MainActivity : AppCompatActivity(), AdapterView.OnItemSelectedListener {&#10;&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    private var themes = arrayOf(&quot;Unselected&quot;, &quot;Shun&quot;, &quot;Ducky&quot;, &quot;Cabbage&quot;, &quot;Sage&quot;, &quot;ThisIsFine&quot;, &quot;AntiThisIsFine&quot;, &quot;Black&quot;, &quot;DarkBlue&quot;, &quot;Hammerhead&quot;, &quot;Stargaze&quot;, &quot;CottonCandy&quot;, &quot;Yellow&quot;, &quot;Teal&quot;, &quot;Purple&quot;, &quot;Green&quot;, &quot;Cyan&quot;)&#10;    private var keyboardHeights = arrayOf(&quot;Unselected&quot;, &quot;Short&quot;, &quot;Medium&quot;, &quot;Tall&quot;, &quot;Custom&quot;)&#10;    private var keyboardLayouts = arrayOf(&quot;Unselected&quot;, &quot;QWERTY&quot;, &quot;QWERTZ&quot;, &quot;AZERTY&quot;, &quot;Dvorak&quot;, &quot;Colemak&quot;, &quot;Zhuyin&quot;)&#10;    private var emojiVariations = arrayOf(&quot;Unselected&quot;, &quot;Masculine&quot;, &quot;Feminine&quot;, &quot;Neutral&quot;)&#10;    private var keySound = arrayOf(&quot;Unselected&quot;, &quot;click&quot;, &quot;meow&quot;, &quot;quack&quot;)&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;&#10;        val repoLink: TextView = findViewById(R.id.repoLink)&#10;        repoLink.movementMethod = LinkMovementMethod.getInstance()&#10;&#10;        // Toggles&#10;&#10;        val capsToggle: SwitchCompat = findViewById(R.id.capsToggle)&#10;        val autocorToggle: SwitchCompat = findViewById(R.id.autocorToggle)&#10;        val gridToggle: SwitchCompat = findViewById(R.id.gridToggle)&#10;        val etenToggle: SwitchCompat = findViewById(R.id.etenToggle)&#10;        val keySoundToggle: SwitchCompat = findViewById(R.id.keySoundToggle)&#10;        &#10;        val prefs = getSharedPreferences(&quot;keyboard_settings&quot;, Context.MODE_PRIVATE)&#10;&#10;        if (!prefs.contains(&quot;capsToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;capsToggle&quot;, true).commit()&#10;        }&#10;        if (!prefs.contains(&quot;autocorToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;autocorToggle&quot;, true).commit()&#10;        }&#10;        if (!prefs.contains(&quot;gridToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;gridToggle&quot;, false).commit()&#10;        }&#10;        if (!prefs.contains(&quot;etenToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;etenToggle&quot;, false).commit()&#10;        }&#10;        if (!prefs.contains(&quot;keySoundToggle&quot;)) {&#10;            prefs.edit().putBoolean(&quot;keySoundToggle&quot;, false).commit()&#10;        }&#10;&#10;        // Load saved toggle state&#10;        capsToggle.isChecked = prefs.getBoolean(&quot;capsToggle&quot;, true)&#10;        autocorToggle.isChecked = prefs.getBoolean(&quot;autocorToggle&quot;, true)&#10;        gridToggle.isChecked = prefs.getBoolean(&quot;gridToggle&quot;, false)&#10;        etenToggle.isChecked = prefs.getBoolean(&quot;etenToggle&quot;, false)&#10;        keySoundToggle.isChecked = prefs.getBoolean(&quot;keySoundToggle&quot;, false)&#10;&#10;        // Save toggle changes&#10;        capsToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;capsToggle&quot;, isChecked) }&#10;        }&#10;        autocorToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;autocorToggle&quot;, isChecked) }&#10;        }&#10;        gridToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;gridToggle&quot;, isChecked) }&#10;        }&#10;        etenToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;etenToggle&quot;, isChecked) }&#10;        }&#10;        keySoundToggle.setOnCheckedChangeListener { _, isChecked -&gt;&#10;            prefs.edit(commit = true) { putBoolean(&quot;keySoundToggle&quot;, isChecked) }&#10;        }&#10;&#10;        // Dropdowns&#10;&#10;        val keyBackgroundColor: Spinner = findViewById(R.id.color_options)&#10;        val savedColor = prefs.getString(&quot;key_color&quot;, &quot;Shun&quot;)&#10;        prefs.edit { putString(&quot;key_color&quot;, savedColor) }&#10;&#10;        val keyboardHeight: Spinner = findViewById(R.id.height_options)&#10;        val savedHeight = prefs.getString(&quot;keyboard_height&quot;, &quot;Short&quot;)&#10;        prefs.edit { putString(&quot;keyboard_height&quot;, savedHeight) }&#10;&#10;        val keyboardLayout: Spinner = findViewById(R.id.layout_options)&#10;        val savedLayout = prefs.getString(&quot;keyboard_layout&quot;, &quot;qwerty&quot;)?.lowercase()&#10;        prefs.edit { putString(&quot;keyboard_layout&quot;, savedLayout) }&#10;&#10;        val emojiVariation: Spinner = findViewById(R.id.emoji_options)&#10;        val savedEmoji = prefs.getString(&quot;emoji_variation&quot;, &quot;neutral&quot;)?.lowercase()&#10;        prefs.edit { putString(&quot;emoji_variation&quot;, savedEmoji) }&#10;&#10;&#10;        val aa_color = ArrayAdapter(this, R.layout.spinner, themes)&#10;        aa_color.setDropDownViewResource(R.layout.spinner)&#10;&#10;        val aa_height = ArrayAdapter(this, R.layout.spinner, keyboardHeights)&#10;        aa_height.setDropDownViewResource(R.layout.spinner)&#10;&#10;        val aa_layout = ArrayAdapter(this, R.layout.spinner, keyboardLayouts)&#10;        aa_layout.setDropDownViewResource(R.layout.spinner)&#10;&#10;        val aa_emoji = ArrayAdapter(this, R.layout.spinner, emojiVariations)&#10;        aa_emoji.setDropDownViewResource(R.layout.spinner)&#10;&#10;        val aa_keySound = ArrayAdapter(this, R.layout.spinner, keySound)&#10;        aa_keySound.setDropDownViewResource(R.layout.spinner)&#10;&#10;        // the color dropdown&#10;        with(keyBackgroundColor) {&#10;            adapter = aa_color&#10;            setSelection(0, false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.custom_fqhll_banner_blue)&#10;        }&#10;&#10;        // the height dropdown&#10;        with(keyboardHeight) {&#10;            adapter = aa_height&#10;            setSelection(0, false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.shun_blue)&#10;        }&#10;&#10;        // the layout dropdown&#10;        with(keyboardLayout) {&#10;            adapter = aa_layout&#10;            setSelection(0, false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.shun_blue)&#10;        }&#10;&#10;        // the emoji dropdown&#10;        with(emojiVariation) {&#10;            adapter = aa_emoji&#10;            setSelection(0, false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.shun_blue)&#10;        }&#10;&#10;        // the key sound dropdown&#10;        with(keySoundEffect) {&#10;            adapter = aa_keySound&#10;            setSelection(keySound.indexOf(prefs.getString(&quot;keySoundEffect&quot;, &quot;Unselected&quot;)), false)&#10;            onItemSelectedListener = this@MainActivity&#10;            setPopupBackgroundResource(R.color.shun_blue)&#10;        }&#10;&#10;&#10;        // edit dictionary stuff&#10;&#10;        val editDictField: EditText = findViewById(R.id.edit_dict_input)&#10;        val addDictButton: Button = findViewById(R.id.add_dict_btn)&#10;        val removeDictButton: Button = findViewById(R.id.remove_dict_btn)&#10;//        val getDictButton: Button = findViewById(R.id.get_dict_btn)&#10;&#10;        addDictButton.setOnClickListener {&#10;            val inputWord = editDictField.text.toString()&#10;&#10;            if (!inDictionary(inputWord) &amp;&amp; inputWord != &quot;&quot;) {&#10;                showToast(message = &quot;adding $inputWord to dictionary...&quot;)&#10;                addToDictionary(inputWord)&#10;            }&#10;&#10;            else if (inputWord == &quot;&quot;) {&#10;                showToast(message = &quot;word cannot be empty!&quot;)&#10;            }&#10;&#10;            else {&#10;                showToast(message = &quot;$inputWord is already in your dictionary!&quot;)&#10;            }&#10;        }&#10;&#10;        removeDictButton.setOnClickListener {&#10;            val inputWord = editDictField.text.toString()&#10;&#10;            if (inDictionary(inputWord)) {&#10;                showToast(message = &quot;removing $inputWord from dictionary...&quot;)&#10;                removeFromDictionary(inputWord)&#10;            }&#10;&#10;            else if (inputWord == &quot;&quot;) {&#10;                showToast(message = &quot;word cannot be empty!&quot;)&#10;            }&#10;&#10;            else {&#10;                showToast(message = &quot;$inputWord is not in your dictionary!&quot;)&#10;            }&#10;        }&#10;&#10;//        getDictButton.setOnClickListener {&#10;//            saveFile()&#10;//        }&#10;&#10;&#10;        // launch keyboard stuff&#10;&#10;        val openSettingsButton: Button = findViewById(R.id.open_settings_btn)&#10;        val setKeyboardButton: Button = findViewById(R.id.set_keyboard_btn)&#10;&#10;        openSettingsButton.setOnClickListener {&#10;            openKeyboardSettings()&#10;        }&#10;&#10;        setKeyboardButton.setOnClickListener {&#10;            switchKeyboard()&#10;        }&#10;    }&#10;&#10;    override fun onItemSelected(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;        val prefs = getSharedPreferences(&quot;keyboard_settings&quot;, Context.MODE_PRIVATE)&#10;        if (parent != null) {&#10;            when (parent.id) {&#10;&#10;                R.id.color_options -&gt; {&#10;                    val selectedColor = themes[position] // Get the selected color&#10;                    if (!selectedColor.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;key_color&quot;, selectedColor) } // Save the selected color&#10;                        showToast(message = &quot;Selected theme: $selectedColor&quot;)&#10;                    }&#10;                }&#10;&#10;                R.id.height_options -&gt; {&#10;                    val selectedHeight = keyboardHeights[position]&#10;                    if (!selectedHeight.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;keyboard_height&quot;, selectedHeight) }&#10;                        showToast(message = &quot;Selected height: $selectedHeight&quot;)&#10;                    }&#10;                }&#10;&#10;                R.id.layout_options -&gt; {&#10;                    val selectedLayout = keyboardLayouts[position]&#10;                    if (!selectedLayout.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;keyboard_layout&quot;, selectedLayout) }&#10;                        showToast(message = &quot;Selected layout: $selectedLayout&quot;)&#10;                    }&#10;                }&#10;&#10;                R.id.emoji_options -&gt; {&#10;                    val selectedEmoji = emojiVariations[position]&#10;                    if (!selectedEmoji.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;emoji_variation&quot;, selectedEmoji) }&#10;                        showToast(message = &quot;Selected: $selectedEmoji&quot;)&#10;                    }&#10;                }&#10;&#10;                R.id.keySoundEffect -&gt; {&#10;                    val selectedSound = keySound[position]&#10;                    if (!selectedSound.equals(&quot;Unselected&quot;)) {&#10;                        prefs.edit { putString(&quot;keySoundEffect&quot;, selectedSound) }&#10;                        showToast(message = &quot;Selected key sound: $selectedSound&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {&#10;        showToast(message = &quot;Nothing selected&quot;)&#10;    }&#10;&#10;    private fun showToast(context: Context = applicationContext, message: String, duration: Int = Toast.LENGTH_LONG) {&#10;        Toast.makeText(context, message, duration).show()&#10;    }&#10;&#10;&#10;    external fun getSuggestion(input: String): String&#10;&#10;    private fun addToDictionary(word: String) {&#10;        val dictPath = filesDir.absolutePath + &quot;/test_files/20k_texting.txt&quot;&#10;        val customWordsPath = filesDir.absolutePath + &quot;/test_files/custom_words.txt&quot;&#10;        CustomKeyboardApp.nativeAddWord(word, dictPath)&#10;        CustomKeyboardApp.nativeAddWord(word, customWordsPath)&#10;    }&#10;&#10;    private fun removeFromDictionary(word: String) {&#10;        val dictPath = filesDir.absolutePath + &quot;/test_files/20k_texting.txt&quot;&#10;        val customWordsPath = filesDir.absolutePath + &quot;/test_files/custom_words.txt&quot;&#10;        CustomKeyboardApp.nativeRemoveWord(word, dictPath)&#10;        CustomKeyboardApp.nativeRemoveWord(word, customWordsPath)&#10;    }&#10;&#10;    private fun inDictionary(word: String): Boolean {&#10;        val path = Paths.get(filesDir.absolutePath + &quot;/test_files/20k_texting.txt&quot;)&#10;&#10;        val lines = Files.readAllLines(path)&#10;        val wordSet: Set&lt;String&gt; = HashSet(lines)&#10;&#10;        return wordSet.contains(word)&#10;    }&#10;&#10;    private fun getCustomWords(): Set&lt;String&gt; {&#10;        val path = Paths.get(filesDir.absolutePath + &quot;/test_files/custom_words.txt&quot;)&#10;&#10;        val lines = Files.readAllLines(path)&#10;        val wordSet: Set&lt;String&gt; = HashSet(lines)&#10;&#10;        return wordSet&#10;    }&#10;    &#10;    private val CREATE_FILE = 1&#10;&#10;    private fun saveFile() {&#10;        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {&#10;            addCategory(Intent.CATEGORY_OPENABLE)&#10;            type = &quot;text/plain&quot;&#10;            putExtra(Intent.EXTRA_TITLE, &quot;FQ-HLL_Keyboard_Custom_Dictionary_Export.txt&quot;)&#10;        }&#10;&#10;        val fileName = intent.getStringExtra(Intent.EXTRA_TITLE)&#10;        val file = fileName?.let { File(this.filesDir, it) }&#10;&#10;        showToast(message = fileName.toString())&#10;&#10;        startActivityForResult(intent, CREATE_FILE)&#10;        if (file != null) {&#10;            alterDocument(file)&#10;        }&#10;    }&#10;&#10;    private fun alterDocument(file: File) {&#10;        FileOutputStream(file).use { fos -&gt; fos.write(&quot;This is my custom file content.&quot;.toByteArray()) }&#10;    }&#10;&#10;    private fun openKeyboardSettings() {&#10;        val intent = Intent(Settings.ACTION_INPUT_METHOD_SETTINGS)&#10;        startActivity(intent)&#10;    }&#10;&#10;    private fun switchKeyboard() {&#10;        val inputMethodManager =&#10;            applicationContext.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager&#10;        inputMethodManager.showInputMethodPicker()&#10;    }&#10;&#10;    companion object {&#10;        init {&#10;            System.loadLibrary(&quot;keyboard&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/xml/caps_keypad.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/xml/caps_keypad.xml" />
              <option name="originalContent" value="&lt;Keyboard xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:keyWidth=&quot;10%p&quot;&#10;    android:horizontalGap=&quot;0px&quot;&#10;    android:verticalGap=&quot;3dp&quot;&#10;    android:keyHeight=&quot;55dp&quot;&#10;    &gt;&#10;    &lt;Row&gt;&#10;        &lt;Key android:keyLabel=&quot;1&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;2&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;3&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;4&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;5&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;6&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;7&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;8&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;9&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;0&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;    &lt;/Row&gt;&#10;    &lt;Row&gt;&#10;        &lt;Key android:keyLabel=&quot;q&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;w&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;e&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;r&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;t&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;y&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;u&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;i&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;o&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;p&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;    &lt;/Row&gt;&#10;    &lt;Row&gt;&#10;        &lt;Key android:keyLabel=&quot;a&quot; android:keyWidth=&quot;15%p&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;s&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;d&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;f&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;g&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;h&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;j&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;k&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;l&quot; android:keyWidth=&quot;15%p&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;    &lt;/Row&gt;&#10;    &lt;Row&gt;&#10;        &lt;Key android:codes=&quot;-1&quot; android:keyLabel=&quot;CAPS&quot; android:keyWidth=&quot;15%p&quot; android:isSticky=&quot;true&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;z&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;x&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;c&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;v&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;b&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;n&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;m&quot;/&gt;&#10;        &lt;Key android:codes=&quot;-5&quot; android:keyLabel=&quot;⌫&quot; android:keyWidth=&quot;15%p&quot; android:isRepeatable=&quot;true&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;        &lt;!-- &lt;Key android:codes=&quot;63,33,58&quot; android:keyLabel=&quot;\? ! :&quot;/&gt;&#9; --&gt;&#10;    &lt;/Row&gt;&#10;    &lt;Row android:rowEdgeFlags=&quot;bottom&quot;&gt;&#10;        &lt;Key android:codes=&quot;47&quot; android:keyLabel=&quot;/&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:codes=&quot;44&quot; android:keyLabel=&quot;,&quot;/&gt;&#10;        &lt;Key android:codes=&quot;32&quot; android:keyLabel=&quot;SPACE&quot; android:keyWidth=&quot;60%p&quot; android:isRepeatable=&quot;true&quot;/&gt;&#10;        &lt;Key android:codes=&quot;46&quot; android:keyLabel=&quot;.&quot;/&gt;&#10;        &lt;Key android:codes=&quot;-4&quot; android:keyOutputText=&quot;\\n&quot; android:keyLabel=&quot;↵&quot; android:keyWidth=&quot;10%p&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;    &lt;/Row&gt;&#10;&lt;/Keyboard&gt;" />
              <option name="updatedContent" value="&lt;Keyboard xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:keyWidth=&quot;10%p&quot;&#10;    android:horizontalGap=&quot;0px&quot;&#10;    android:verticalGap=&quot;3dp&quot;&#10;    android:keyHeight=&quot;55dp&quot;&#10;    &gt;&#10;    &lt;Row&gt;&#10;        &lt;Key android:keyLabel=&quot;1&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;2&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;3&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;4&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;5&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;6&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;7&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;8&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;9&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;0&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;    &lt;/Row&gt;&#10;    &lt;Row&gt;&#10;        &lt;Key android:keyLabel=&quot;Q&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;W&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;E&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;R&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;T&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;Y&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;U&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;I&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;O&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;P&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;    &lt;/Row&gt;&#10;    &lt;Row&gt;&#10;        &lt;Key android:keyLabel=&quot;A&quot; android:keyWidth=&quot;15%p&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;S&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;D&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;F&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;G&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;H&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;J&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;K&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;L&quot; android:keyWidth=&quot;15%p&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;    &lt;/Row&gt;&#10;    &lt;Row&gt;&#10;        &lt;Key android:codes=&quot;-1&quot; android:keyLabel=&quot;CAPS&quot; android:keyWidth=&quot;15%p&quot; android:isSticky=&quot;true&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;Z&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;X&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;C&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;V&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;B&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;N&quot;/&gt;&#10;        &lt;Key android:keyLabel=&quot;M&quot;/&gt;&#10;        &lt;Key android:codes=&quot;-5&quot; android:keyLabel=&quot;⌫&quot; android:keyWidth=&quot;15%p&quot; android:isRepeatable=&quot;true&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;        &lt;!-- &lt;Key android:codes=&quot;63,33,58&quot; android:keyLabel=&quot;\? ! :&quot;/&gt;&#9; --&gt;&#10;    &lt;/Row&gt;&#10;    &lt;Row android:rowEdgeFlags=&quot;bottom&quot;&gt;&#10;        &lt;Key android:codes=&quot;47&quot; android:keyLabel=&quot;/&quot; android:keyEdgeFlags=&quot;left&quot;/&gt;&#10;        &lt;Key android:codes=&quot;44&quot; android:keyLabel=&quot;,&quot;/&gt;&#10;        &lt;Key android:codes=&quot;32&quot; android:keyLabel=&quot;SPACE&quot; android:keyWidth=&quot;60%p&quot; android:isRepeatable=&quot;true&quot;/&gt;&#10;        &lt;Key android:codes=&quot;46&quot; android:keyLabel=&quot;.&quot;/&gt;&#10;        &lt;Key android:codes=&quot;-4&quot; android:keyOutputText=&quot;\\n&quot; android:keyLabel=&quot;↵&quot; android:keyWidth=&quot;10%p&quot; android:keyEdgeFlags=&quot;right&quot;/&gt;&#10;    &lt;/Row&gt;&#10;&lt;/Keyboard&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>